[{"/Users/nerlucas/Documents/EP3_BD/client/src/index.tsx":"1","/Users/nerlucas/Documents/EP3_BD/client/src/App.tsx":"2","/Users/nerlucas/Documents/EP3_BD/client/src/Tab.tsx":"3","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Cadastro.tsx":"4","/Users/nerlucas/Documents/EP3_BD/client/src/models/apiModels.ts":"5","/Users/nerlucas/Documents/EP3_BD/client/src/utilities/ApiClient.ts":"6","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Graph.tsx":"7","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/ArmsDealInfo.tsx":"8","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Conflicts.tsx":"9","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5MilitaryGroups.tsx":"10","/Users/nerlucas/Documents/EP3_BD/client/src/SuccessPostResult.tsx":"11","/Users/nerlucas/Documents/EP3_BD/client/src/FailedPostResult.tsx":"12","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Organizations.tsx":"13","/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Countries.tsx":"14"},{"size":220,"mtime":1607385425542,"results":"15","hashOfConfig":"16"},{"size":1382,"mtime":1608269107140,"results":"17","hashOfConfig":"16"},{"size":307,"mtime":1607389866006,"results":"18","hashOfConfig":"16"},{"size":3416,"mtime":1608265366041,"results":"19","hashOfConfig":"16"},{"size":5784,"mtime":1608269540783,"results":"20","hashOfConfig":"16"},{"size":1197,"mtime":1608252858811,"results":"21","hashOfConfig":"16"},{"size":2709,"mtime":1608250372904,"results":"22","hashOfConfig":"16"},{"size":3723,"mtime":1608251066457,"results":"23","hashOfConfig":"16"},{"size":2284,"mtime":1608268321957,"results":"24","hashOfConfig":"16"},{"size":2972,"mtime":1608269073466,"results":"25","hashOfConfig":"16"},{"size":352,"mtime":1608259468908,"results":"26","hashOfConfig":"16"},{"size":406,"mtime":1608259715416,"results":"27","hashOfConfig":"16"},{"size":3026,"mtime":1608268311627,"results":"28","hashOfConfig":"16"},{"size":3661,"mtime":1608270799532,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},"irr5h3",{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"32"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"54"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"61","usedDeprecatedRules":"32"},"/Users/nerlucas/Documents/EP3_BD/client/src/index.tsx",[],["62","63"],"/Users/nerlucas/Documents/EP3_BD/client/src/App.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tab.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Cadastro.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/models/apiModels.ts",[],"/Users/nerlucas/Documents/EP3_BD/client/src/utilities/ApiClient.ts",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Graph.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/ArmsDealInfo.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Conflicts.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5MilitaryGroups.tsx",["64"],"import React from \"react\";\nimport { MilitaryGroup, Supplies, WarConflict } from \"../models/apiModels\";\nimport ApiClient from \"../utilities/ApiClient\";\n\ninterface GetMilitaryGroupResponse {\n    details: string;\n    items : Array<MilitaryGroup>;\n    success: boolean;\n}\n\ninterface GetSuppliesResponse {\n    details: string;\n    items : Array<Supplies>;\n    success: boolean;\n}\n\ninterface IProps {\n}\n\ninterface IState {\n    militaryGroups: Array<MilitaryGroup>;\n}\n\nexport class Top5MilitaryGroups extends React.Component<IProps, IState> {\n    apiClient : ApiClient;\n\n    constructor(props : any) {\n        super(props);\n        this.apiClient = new ApiClient();\n        this.state = {\n            militaryGroups: []\n        }\n    }\n\n    async fetchMilitaryGroupInfo() {\n        let endpoint = \"supplies/query\";\n        let requestParams = {\n            query: \"select codigog from fornece group by codigog order by SUM(numarmas) desc limit 5;\"\n        };\n        let response : GetSuppliesResponse = await this.apiClient.getFromQuery(endpoint, requestParams);\n        let militaryGroupCodes : Array<string> = response.items.map((supplies) => supplies.codigog || \"\");\n        let militaryGroups : Array<MilitaryGroup> = await this.getGroups(militaryGroupCodes)\n        \n        this.setState({\n            militaryGroups\n        })\n    }\n\n    async getGroups(groupCodes : Array<string>) : Promise<Array<MilitaryGroup>> {\n        let groups: Array<MilitaryGroup> = [];\n        for (let i = 0; i < groupCodes.length; i++) {\n            let queryObject : MilitaryGroup = new MilitaryGroup(groupCodes[i]);\n            let response: GetMilitaryGroupResponse = await this.apiClient.get(queryObject);\n\n            let militaryGroup : MilitaryGroup = response.items[0];\n            groups.push(militaryGroup);\n        }\n\n        return groups;\n    }\n\n    render() {\n\n        return (\n            <div className=\"Cadastro\">\n                <p>Listar os 5 maiores grupos armados com maior n√∫mero de armas fornecidos.</p>\n                <br/>\n                {\n                    this.state.militaryGroups.length > 0 ? \n                    <table>\n                        <tr>\n                            <th>Nome do Grupo</th>\n                        </tr>\n                        {\n                            this.state.militaryGroups.map(\n                                (militaryGroup) => {\n                                    return (\n                                        <tr>\n                                            <td>{militaryGroup?.nomegrupo}</td>\n                                        </tr>\n                                    );\n                                }\n                            )\n                        }\n                    </table>\n                    : null\n                }\n                <br/>\n                <button className=\"botaoPadrao\" onClick={() => this.fetchMilitaryGroupInfo()}>Buscar</button>\n            </div>\n        );\n    }\n}","/Users/nerlucas/Documents/EP3_BD/client/src/SuccessPostResult.tsx",[],["65","66"],"/Users/nerlucas/Documents/EP3_BD/client/src/FailedPostResult.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Organizations.tsx",[],"/Users/nerlucas/Documents/EP3_BD/client/src/Tabs/Top5Countries.tsx",["67"],"import React from \"react\";\nimport { ConflictCountry, Supplies } from \"../models/apiModels\";\nimport ApiClient from \"../utilities/ApiClient\";\n\ninterface GetConflictCountryResponse {\n    details: string;\n    items : Array<ConflictCountry>;\n    success: boolean;\n}\n\ninterface GetSuppliesResponse {\n    details: string;\n    items : Array<Supplies>;\n    success: boolean;\n}\n\ninterface IProps {\n}\n\ninterface IState {\n    countries: Array<string>;\n    numberOfConflicts : Array<number>;\n    nOfRows : number;\n}\n\nexport class Top5Countries extends React.Component<IProps, IState> {\n    apiClient : ApiClient;\n\n    constructor(props : any) {\n        super(props);\n        this.apiClient = new ApiClient();\n        this.state = {\n            countries: [],\n            numberOfConflicts: [],\n            nOfRows: 0\n        }\n    }\n\n    async fetchCountryInfo() {\n        let endpoint = \"conflictcountry/query\";\n        let requestParams = {\n            query: \"select pais, COUNT(pais) from conflitopais where codconflito in (select codconflito from conflito where tipoconf='Religioso') group by pais order by COUNT(pais) desc limit 1;\"\n        };\n    \n        let response : GetConflictCountryResponse = await this.apiClient.getFromQuery(endpoint, requestParams);\n        let countries : Array<string> = response.items.map((countryconflict) => countryconflict.pais || \"\");\n        let numberOfConflicts : Array<number> = await this.getNumberOfConflicts(countries);\n        let nOfRows : number = countries.length;\n        \n        this.setState({\n            countries,\n            numberOfConflicts,\n            nOfRows\n        })\n    }\n\n    async getNumberOfConflicts(countries : Array<string>) : Promise<Array<number>> {\n        let result : Array<number> = [];\n        let endpoint = \"conflictcountry/query\";\n        for (let i = 0; i < countries.length; i++) {\n            let requestParams = {\n                query: `select * from conflitopais where codconflito in (select codconflito from conflito where tipoconf='Religioso') and pais='${countries[i]}';`\n            };\n            let response: GetConflictCountryResponse = await this.apiClient.getFromQuery(endpoint, requestParams);\n            result.push(response.items.length);\n        }\n\n        return result;\n    }\n\n    render() {\n        let rowArray : Array<number> = [];\n        for (let i = 0; i < this.state.nOfRows; i++) {\n            rowArray.push(i);\n        }\n\n        return (\n            <div className=\"Cadastro\">\n                <p>Listar o pa√≠s e n√∫mero de conflitos com maior n√∫mero de conflitos religiosos.</p>\n                <br/>\n                {\n                    this.state.countries.length > 0 ? \n                    <table>\n                        <tr>\n                            <th>Pa√≠s</th>\n                            <th>N√∫mero de Conflitos</th>\n                        </tr>\n                        {\n                            rowArray.map(\n                                (rowNum) => {\n                                    return (\n                                        <tr>\n                                            <td>{this.state.countries[rowNum]}</td>\n                                            <td>{this.state.numberOfConflicts[rowNum]}</td>\n                                        </tr>\n                                    );\n                                }\n                            )\n                        }\n                    </table>\n                    : null\n                }\n                <br/>\n                <button className=\"botaoPadrao\" onClick={() => this.fetchCountryInfo()}>Buscar</button>\n            </div>\n        );\n    }\n}",{"ruleId":"68","replacedBy":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","severity":1,"message":"73","line":2,"column":35,"nodeType":"74","messageId":"75","endLine":2,"endColumn":46},{"ruleId":"68","replacedBy":"76"},{"ruleId":"70","replacedBy":"77"},{"ruleId":"72","severity":1,"message":"78","line":11,"column":11,"nodeType":"74","messageId":"75","endLine":11,"endColumn":30},"no-native-reassign",["79"],"no-negated-in-lhs",["80"],"@typescript-eslint/no-unused-vars","'WarConflict' is defined but never used.","Identifier","unusedVar",["79"],["80"],"'GetSuppliesResponse' is defined but never used.","no-global-assign","no-unsafe-negation"]